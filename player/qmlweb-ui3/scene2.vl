import "."

Item {
  id: my
  anchors.fill: parent

  property var vzroot
  property var adder_target: vzroot
  property var special_objects
  
  property alias scene3d: scene3da
  Scene3D {
    id: scene3da
  }
  
  property alias editor: editora
  SceneControls {
    id: editora

    Packages {
      vzroot: my.vzroot
      special_objects: my.special_objects
    }

    Export {
      vzroot: my.vzroot
      special_objects: my.special_objects
    }

    UI {
      vzroot: my.vzroot
      adder_target: my.adder_target
      special_objects: my.special_objects
      stateobj: my.special_objects.state
    }

  }

  Component.onCompleted: editor.refineSelf();
  
  /////// интерфейс выбора текущего слоя P3
  property var screens: [editor]
  
  // todo вынести это в screenManager. Кстати это относится к player, а не к qml уже.
  
  /////// фича "активировать экран"
  // screen - qml-объект (но не обязательно; главное чтобы на visible реагировал)
  
  function setActiveScreen0( screen ) {
    var arr = screens;
    var found = -1;
    for (var i=0; i<arr.length; i++) {
      var a = arr[i];
      if (a === screen) {
          a.visible = true;
          found = i;
      }
      else
          a.visible = false;
    }
    if (found < 0) {
      screens.push( screen );
      return (screens.length-1);
    }
    return found;
  }
  
  ///// фича "следующий экран"
  
  property var currentScreenIndex: 0
  
  function setActiveScreen( screen ) {
    var i = setActiveScreen0( screen );
    currentScreenIndex = i;
  }

  function setNextScreen() {
    var s = screens[ (currentScreenIndex+1) % screens.length ];
    setActiveScreen( s );
  }

  function setActiveScreenN( num ) {
    setActiveScreen( screens[num] || screen[0] )
  }
  
  function removeScreen( screen ) {
    var i = removeScreen0( screen );
    if (i == currentScreenIndex) {
      currentScreenIndex = currentScreenIndex-1;
      setNextScreen()
    }
  }
  
  ////// фича "добавить экран"
  function addScreen( screen ) {
    var i = screens.indexOf( screen );
    if (i < 0) screens.push( screen );
    // особая субфича - экраны надо гасить на этапе инициализации
    screen.visible = false;
  }
  function removeScreen0( screen ) {
    var i = screens.indexOf( screen );
    if (i >= 0) {
      screens.splice( i,1 );
    }
    return i;
  }

  // идеи: find-screen-by-code?
  
  /////// ожидается от корневого объекта viewlang-ом
  property int propertyComputationPending: 0
  property var gatheredParams: []
  
  property bool animationActive : false;
  property bool animationRecord : false;
  
  signal animationTick();

}
